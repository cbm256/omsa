rm(list = ls())
# -------------------- Code for Question 7.2 -----------------------------
# Clear environment
rm(list = ls())
# Setting the random number generator seed so that our results are reproducible
# (Your solution doesn't need this, but it's usually good practice to do)
set.seed(1)
# ---------------------------- Data manipulation -------------------------------------
data <- read.table("temps.txt", header = TRUE)
#
# optional check to make sure the data is read correctly
#
head(data)
# Console output for head(data)
##    DAY X1996 X1997 X1998 X1999 X2000 X2001 X2002 X2003 X2004 X2005
##1 1-Jul    98    86    91    84    89    84    90    73    82    91
##2 2-Jul    97    90    88    82    91    87    90    81    81    89
##3 3-Jul    97    93    91    87    93    87    87    87    86    86
##4 4-Jul    90    91    91    88    95    84    89    86    88    86
##5 5-Jul    89    84    91    90    96    86    93    80    90    89
##6 6-Jul    93    84    89    91    96    87    93    84    90    82
##        X2006 X2007 X2008 X2009 X2010 X2011 X2012 X2013 X2014 X2015
##1          93    95    85    95    87    92   105    82    90    85
##2          93    85    87    90    84    94    93    85    93    87
##3          93    82    91    89    83    95    99    76    87    79
##4          91    86    90    91    85    92    98    77    84    85
##5          90    88    88    80    88    90   100    83    86    84
##6          81    87    82    87    89    90    98    83    87    84
# NOTE: ALL ROWS OF THIS FILE STARTING WITH "##" DENOTE R OUTPUT
#
# create a vector of this data
data <- as.vector(unlist(data[,2:21]))
# turn the vector into a time series object
myts <- ts(data,start=1996,frequency=123)
# Single exponential smoothing
m1 <- HoltWinters(myts,beta=FALSE,gamma=FALSE)
m1
## Holt-Winters exponential smoothing without trend and without seasonal component.
##
## Call:
## HoltWinters(x = myts, beta = FALSE, gamma = FALSE)
##
## Smoothing parameters:
##  alpha: 0.8396301
##  beta : FALSE
##  gamma: FALSE
##
## Coefficients:
##       [,1]
## a 63.30952
#
# So, the baseline estimate at the end is 63.30952, and the
# best value of alpha found is 0.8396301.
# [Of course, both of those have more significant digits reported
# than are reasonable.]
# Double exponential smoothing
m2 <- HoltWinters(myts,gamma=FALSE)
m2
## Holt-Winters exponential smoothing with trend and without seasonal component.
##
## Call:
## HoltWinters(x = myts, gamma = FALSE)
##
## Smoothing parameters:
##  alpha: 0.8455303
##  beta : 0.003777803
##  gamma: FALSE
##
## Coefficients:
##           [,1]
## a 81.729657393
## b -0.004838906
#
# Notice that the final trend estimate (b) is very close to zero
# (-0.004838906) and the value of beta is also very close to zero.
# This suggests that there isn't really a significant trend.
# Triple exponential smoothing (additive seasonality)
m3a <- HoltWinters(myts)
m3a
# Lots of output (123 seasonal factors) but the key is that
# b and beta are again both zero or very close to it.
# Triple exponential smoothing (multiplicative seasonality)
m3m <- HoltWinters(myts,seasonal="multiplicative")
m3m
# Lots of output (123 seasonal factors) but the key is that
# b and beta are again both zero or very close to it.
# m3m$fitted[4] shows the seasonal factors for each data point.
#
# Put the factors into a matrix
m <- matrix(m3m$fitted[,4],nrow=123)
From here, we can run the same CUSUM analysis as in the previous homework, but on the seasonal factors.
knitr::opts_chunk$set(echo = TRUE, fig.pos= "H")
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
library(ggplot2)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
plotmatrix(raw, colour="gray20")
library(ggplot2)
library(GGally)
install.packages("GGally")
library(ggplot2)
library(GGally)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
ggpairs(raw)
head(raw)
ggcorrplot(raw, method = "circle")
install.packages("ggcorrplot")
ggcorrplot(raw, method = "circle")
library(ggcorrplot)
ggcorrplot(raw, method = "circle")
pairs(raw)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
age     <- c(4, 8, 7, 12, 6, 9, 10, 14, 7)
gender  <- as.factor(c(1, 0, 1, 1, 1, 0, 1, 0, 0))
bmi_p   <- c(0.86, 0.45, 0.99, 0.84, 0.85, 0.67, 0.91, 0.29, 0.88)
m_edu   <- as.factor(c(0, 1, 1, 2, 2, 3, 2, 0, 1))
p_edu   <- as.factor(c(0, 2, 2, 2, 2, 3, 2, 0, 0))
f_color <- as.factor(c("blue", "blue", "yellow", "red", "red", "yellow",
"yellow", "red", "yellow"))
asthma <- c(1, 1, 0, 1, 0, 0, 0, 1, 1)
xfactors <- model.matrix(asthma ~ gender + m_edu + p_edu + f_color)[, -1]
xfactors
xfactors <- model.matrix(asthma ~ gender + m_edu + p_edu + f_color)
xfactors
xfactors <- model.matrix(asthma ~ gender + m_edu + p_edu + f_color)[, -1]
xfactors
xfactors <- model.matrix(asthma ~ gender + m_edu + p_edu + f_color)
xfactors[,-1]
install.packages("glmnet")
xfactors <- model.matrix(Crime ~ So)[, -1]
xfactors <- model.matrix(raw$Crime ~ raw$So)[, -1]
xfactors = model.matrix(raw$Crime ~ as.factor(raw$So))[, -1]
xfactors
Crime[,:4]
Crime[,4]
raw[:4]
raw[1:4]
head(raw)
x = as.matrix(data.frame(raw$M, raw[3:15], xfactors))
x
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
xfactors = model.matrix(raw$Crime ~ as.factor(raw$So))[, -1]
x = as.matrix(data.frame(raw$M, raw[3:15], xfactors))
glmmod = glmnet(x, y=raw$Crime, alpha=1, family="binomial")
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
xfactors = model.matrix(raw$Crime ~ as.factor(raw$So))[, -1]
x = as.matrix(data.frame(raw$M, raw[3:15], xfactors))
glmmod = glmnet(x, y=raw$Crime, alpha=1)
plot(glmmod, xvar="lambda")
glmmod
coef(glmmod)[, 10]
cv.glmmod <- cv.glmnet(x, y=Crime, alpha=1)
plot(cv.glmmod)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
data = raw
data$So = as.factor(data$So)
head(data)
fit = lm(Crime~ M, So, Ed, P01, Po2, LF, M.F, Pop, NW, U1, U2, Wealth, Ineq, Prob, Time, data = data)
data$M.F
data$M_F = data$M.F
head(data)
fit = lm(Crime~ M, So, Ed, P01, Po2, LF, M_F, Pop, NW, U1, U2, Wealth, Ineq, Prob, Time, data = data)
fit = lm(Crime~ M, So, Ed, P01, Po2, LF, Pop, NW, U1, U2, Wealth, Ineq, Prob, Time, data = data)
fit = lm(Crime~ M, So, Ed, P01, Po2, LF,  NW, U1, U2, Wealth, Ineq, Prob, Time, data = data)
fit = lm(Crime~  M_F, Pop, NW, U1, U2, Wealth, Ineq, Prob, Time, data = data)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
data = raw
data$So = as.factor(data$So)
fit = lm(Crime~  M_F, Pop, NW, U1, U2, Wealth, data = data)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
data = raw
data$So = as.factor(data$So)
fit = lm(Crime~  Pop, NW, U1, U2, Wealth, data = data)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
data = raw
data$So = as.factor(data$So)
fit = lm(Crime~  Pop, NW, U1,  Wealth, data = data)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
data = raw
data$So = as.factor(data$So)
fit = lm(Crime~  Pop, NW, U1, data = data)
fit = lm(Crime~ ., data = data)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
head(raw)
data = raw
data$So = as.factor(data$So)
fit = glm(Crime~ ., data = data)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
data = raw
data$So = as.factor(data$So)
fit = glm(Crime~ ., data = data)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
anova(fit)
fit[1]
fit[2]
fit[3]
fit[4]
fit[5]
fit[6]
fit[7]
fit[8]
fit[9]
fit[10]
fit[11]
fit
fit[12]
fit[13]
fit[14]
fit[15]
fit[16]
influence(fit)
coefficients(fit)
summary(fit)[2]
summary(fit)[3]
summary(fit)[1]
summary(fit)[4]
summary(fit)$Coefficients
summary(fit)[5]
summary(fit)[6]
summary(fit)[7]
summary(fit)[71]
summary(fit)[1]
summary(fit)[3]
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmp(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
data = raw
data$So = as.factor(data$So)
fit = lm(Crime~ ., data = data)
summary(fit)
fit = lm(Crime~ ., data = data)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmp(fit)
summary(fit)[1]
summary(fit)[2]
summary(fit)[3]
summary(fit)[4]
summary(fit)[4]$Estimate
summary(fit)[4][1]
summary(fit)[4][2]
summary(fit)[4][1][1]
summary(fit)[4][1][1]$Estimate
as.data.frame(summary(fit)[4][1][1])
as.data.frame(summary(fit)[4][1][1])[4]
as.data.frame(summary(fit)[4])[4]
p = as.data.frame(summary(fit)[4])[4]
p<=.05
p = as.data.frame(summary(fit)[4])[4]
p<=.06
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
data =
fit = lm(Crime~ M+Ed+U2+Ineq+Prob, data = data)
summary(fit)
data =
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth, data = data)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth, data = data)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth, data=raw)
summary(fit)
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth+LF, data=raw)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth+LF, data=raw)
summary(fit)
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth+M.F, data=raw)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth+M.F, data=raw)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Prob+Wealth+Pop, data=raw)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Wealth, data=raw)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Wealth+NW, data=raw)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Wealth+NW+Time, data=raw)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Wealth+NW, data=raw)
summary(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Wealth+NW, data=raw)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
install.packages("DAAG")
library(DAAG)
cv.lm(df=raw, fit, m=3) # 3 fold cross-validation
library(DAAG)
cv.lm(fit, m=3) # 3 fold cross-validation
library(DAAG)
df = raw
form.lm.1 = formula(Crime~.)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW)
cv.lm(df=df, form.lm=form.lm.1, m=5) # 3 fold cross-validation
library(DAAG)
df = raw
form.lm.1 = formula(Crime~.)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW)
cv.lm(form.lm=form.lm.1, m=5) # 3 fold cross-validation
library(DAAG)
df = raw
form.lm.1 = formula(Crime~.)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW, data =raw)
cv.lm(form.lm=form.lm.1, m=5) # 3 fold cross-validation
library(DAAG)
df = raw
form.lm.1 = formula(Crime~.)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW, data =raw)
cv.lm(data = raw, form.lm=form.lm.1, m=5) # 3 fold cross-validation
library(DAAG)
df = raw
form.lm.1 = formula(Crime~.)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW, data =raw)
cv.lm(data = raw, form.lm=form.lm.1, m=5)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW, data =raw)
cv.lm(data = raw, form.lm=form.lm.2, m=5)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
data = raw
data$So = as.factor(data$So)
fit = lm(Crime~ ., data = data)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
library(glmnet)
raw = read.table('uscrime.txt', header = TRUE, sep = '\t')
fit = lm(Crime~ M+Ed+U2+Ineq+Wealth+NW, data=raw)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
library(DAAG)
df = raw
form.lm.1 = formula(Crime~.)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW, data =raw)
cv.lm(data = raw, form.lm=form.lm.1, m=5)
form.lm.2 = formula(Crime~ M+Ed+U2+Ineq+Wealth+NW, data =raw)
cv.lm(data = raw, form.lm=form.lm.2, m=5)
summary(fit)
summary(fit)[1]
summary(fit)[2]
summary(fit)[3]
summary(fit)[4]
summary(fit)[5]
summary(fit)[6]
summary(fit)[7]
