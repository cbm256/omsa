d
dfTest[2,1]
Time<-c("2001-01-01 07:00:00 GMT","2001-01-01 08:00:00 GMT")
str(Time)
d<-as.POSIXct(Time, tz="GMT")
d
Time<-data.frame(c("01-01-2001 11:00:00 GMT",
'01-01-2001 12:00:00 GMT')
colnames(Time)<-c("Time")
apply(Time,2,strptime, format ="%Y-%m-%d %H:%M:%S", tz = "GMT")
Time<-c("01-01-2001 11:00:00 GMT",
'01-01-2001 12:00:00 GMT')
d<-as.POSIXct(Time, tz="GMT")
d
Time<-c("01-01-2001 11:00:00 GMT",
'01-01-2001 12:00:00 GMT')
Time[1]
data1<-c(10,11,12,13,14,15)
data2<-c(20,21,22,23,24,25)
x<-c(1,2)
elevation<-c(10,11,20,24,25)
elevation<-data.table(elevation)
data1prob<-ecdf(data1)
data2prob<-ecdf(data2)
elevation[,prob:=1-as.numeric(approx(x = x, y =c(data1prob(elevation),data2prob(elevation)), xout = 1.5)[2])]
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data1<-c(10,11,12,13,14,15)
data2<-c(20,21,22,23,24,25)
x<-c(1,2)
elevation<-c(10,11,20,24,25)
elevation<-data.table(elevation)
data1prob<-ecdf(data1)
data2prob<-ecdf(data2)
elevation[,prob:=1-as.numeric(approx(x = x, y =c(data1prob(elevation),data2prob(elevation)), xout = 1.5)[2])]
elevation[,prob:=elevation-as.numeric(approx(x = x, y =c(5,6), xout = 1.5)[2])]
View(elevation)
data1prob<-ecdf(data1)
data1prob(2)
data1prob(11)
str(data1prob(11))
elevation[, prob := mapply(
function(x,y1,y2) 1 - approx(x = x, y = c(y1,y2), xout = 1.5)[[2]],
list(x),
ecdf(data1)(elevation),
ecdf(data2)(elevation)
)]
View(elevation)
elevation[,prob:=elevation-as.numeric(approx(x = x, y =c(ecdf(data1)(elevation),ecdf(data2)(elevation)), xout = 1.5)[2])]
noise <- function(n, mean, std) {
rnorm(n, mean, std)
}
noise(5, 1, 2)
?rnorm
avgVelocity_FPS <- function(gammaS,W50, C){
vel <- C * (2 * 32.174 * (gammaS-62.5)/62.5)^.5*(((6 * W50)/(pi * gammaS))^(1/3))^.5
return(vel)
}
weight_LB       <- seq(from =10, to = 100000)
stoneStability <- data.table(weight_LB)
stoneStability[,velocity_FPS:=avgVelocity_FPS(gammaS=205, W50=weight_LB, C=.86)]
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_point()
geom_line() +
scale_y_log10() +
scale_x_log10()
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
avgVelocity_FPS <- function(gammaS,W50, C){
vel <- C * (2 * 32.174 * (gammaS-62.5)/62.5)^.5*(((6 * W50)/(pi * gammaS))^(1/3))^.5
return(vel)
}
weight_LB       <- seq(from =10, to = 100000)
stoneStability <- data.table(weight_LB)
stoneStability[,velocity_FPS:=avgVelocity_FPS(gammaS=205, W50=weight_LB, C=.86)]
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_point()
geom_line() +
scale_y_log10() +
scale_x_log10()
minW50<-function(gammaS, velcoity, C){
weight<-(velocity^6* 62.5*pi*gammaS)/(6*C^6*2*32.174*(gammaS-62.5))
return(weight)
}
minW50(gammaS=205, C=.86, velocity= 18)
minW50<-function(gammaS, velocity, C){
weight<-(velocity^6* 62.5*pi*gammaS)/(6*C^6*2*32.174*(gammaS-62.5))
return(weight)
}
minW50(gammaS=205, C=.86, velocity= 18)
minW50<-function(gammaS, velocity, C){
weight<-(velocity/(C*(2*32.174*(gammaS-62.5)/62.5)^.5))^6*pi*gammaS/6
return(weight)
}
minW50(gammaS=205, C=.86, velocity= 18)
weight<-minW50(gammaS=205, C=.86, velocity= 18)
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point()+
scale_y_log10() +
scale_x_log10()
velocity<-18
test<-data.frame(velocity,weight)
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(test, aes(velocity, weight))+
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(test, aes(x=velocity, y=weight))+
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(x=velocity, y=weight) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(x=velocity, y=weight, aes(colour=red)) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(x=velocity, y=weight, aes(colour='blue')) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(x=velocity, y=weight, colour='red') +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(x=velocity, y=weight, colour='red', size = 4) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight, colour='red', size = 4)) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight)) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red') +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_y_log10() +
scale_x_log10()
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_y_log10() +
scale_x_log10() +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
weight_LB       <- seq(from =1000, to = 100000)
stoneStability <- data.table(weight_LB)
stoneStability[,velocity_FPS:=avgVelocity_FPS(gammaS=205, W50=weight_LB, C=.86)]
dataPoin
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_y_log10(breaks = seq(from = 10, to = 100000, by = 1000)) +
scale_x_log10() +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_y_log10(breaks = seq(from = 1000, to = 10000, by = 1000), seq(from = 20000, to = 100000, by = 10000)) +
scale_x_log10() +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_y_log10(breaks = seq(from = 1000, to = 10000, by = 1000)) +
scale_x_log10() +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
weight_LB       <- seq(from =1000, to = 10000)
stoneStability <- data.table(weight_LB)
stoneStability[,velocity_FPS:=avgVelocity_FPS(gammaS=205, W50=weight_LB, C=.86)]
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_y_log10(breaks = seq(from = 1000, to = 10000, by = 1000)) +
scale_x_log10() +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(stoneStability, aes(x = velocity_FPS, y = weight_LB)) +
geom_line() +
geom_point(aes(x=velocity, y=weight), colour= 'red', size = 4) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
labs(title = 'Stone Stability') +
xlab('Average Velocity, FPS') +
ylab('Minimum W50 Stone Weight, LB')
install.packages("dev")
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
library(printr)
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
install.packages("data.table")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:data.table", unload=TRUE)
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?round
round(.5 + -2:4)
( x1 <- seq(-2, 4, by = .5) )
round(x1)
Vel = 14
apronBase <- 132
apronWidth<- 50
w50Min<- function(gammaS, velocity, C = 0.86){
weight<-(velocity/(C*(2*32.174*(gammaS-62.5)/62.5)^.5))^6*pi*gammaS/6
return(weight)
}
Quarry<- c('quarry1', 'quarry2', 'quarry3')
Unit.Weight.LB.ft.Cubed <- c(155, 165, 185)
stoneTbl<-data.table(Quarry,Unit.Weight.LB.ft.Cubed)
stoneTbl[,W.50.Min:=round(w50Min(gammaS = Unit.Weight.LB.ft.Cubed, velocity = Vel))]
w100Max <- 5*w50Min
w100Min <- 2*w50Min
w15Min  <- w100Max*(1/16)
W50Max  <-5*w15Min
w50Min  <- w50Min
LB <- c(w100Max,w100Min,W50Max,w50Min, w15Min)
Gradation <- c('w100Max','w100Min','W50Max','w50Min','w15Min')
gradationTbl <- data.table(Gradation, LB)
gradationTbl[,Diameter_FT:=dPercent(LB, gammaS)]
return(gradationTbl)
}
wGradation <- function(w50Min, gammaS){
w100Max <- 5*w50Min
w100Min <- 2*w50Min
w15Min  <- w100Max*(1/16)
W50Max  <-5*w15Min
w50Min  <- w50Min
LB <- c(w100Max,w100Min,W50Max,w50Min, w15Min)
Gradation <- c('w100Max','w100Min','W50Max','w50Min','w15Min')
gradationTbl <- data.table(Gradation, LB)
gradationTbl[,Diameter_FT:=dPercent(LB, gammaS)]
return(gradationTbl)
}
for(i in 1:length(stoneTbl[,Quarry])){
stoneTbl[i,Quarry] <-  data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTble[i,Unit.Weight.LB.ft.Cubed])
}
for(i in 1:length(stoneTbl[,Quarry])){
stoneTbl[i,Quarry] <-  data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTble[i,Unit.Weight.LB.ft.Cubed]))
}
dPercent <- function(wPercent, gammaS){
diameter <- (6*wPercent/(pi*gammaS))^(1/3)
return(diameter)
}
for(i in 1:length(stoneTbl[,Quarry])){
stoneTbl[i,Quarry] <-  data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTble[i,Unit.Weight.LB.ft.Cubed]))
}
for(i in 1:length(stoneTbl[,Quarry])){
stoneTbl[i,Quarry] <-  data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTbl[i,Unit.Weight.LB.ft.Cubed]))
}
test<- data.table(wGradation(w50Min=stoneTbl[1,W.50.Min], gammaS = stoneTbl[1,Unit.Weight.LB.ft.Cubed]))
View(test)
for(i in 1:length(stoneTbl[,Quarry])){
assign(paste('Quarry',i,sep='')) <-  data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTbl[i,Unit.Weight.LB.ft.Cubed]))
}
assign(paste('Quarry',1,sep=''))
for(i in 1:length(stoneTbl[,Quarry])){
assign(paste('Quarry',1,sep=''), Quarry1) <-  data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTbl[i,Unit.Weight.LB.ft.Cubed]))
}
assign(paste('Quarry',1,sep=''),stoneTbl[1,Quarry] )
assign(paste('Quarry',1,sep=''), data.table(wGradation(w50Min=stoneTbl[1,W.50.Min], gammaS = stoneTbl[1,Unit.Weight.LB.ft.Cubed])))
for(i in 1:length(stoneTbl[,Quarry])){
assign(paste('Quarry',i,sep=''), data.table(wGradation(w50Min=stoneTbl[i,W.50.Min], gammaS = stoneTbl[i,Unit.Weight.LB.ft.Cubed])))
}
View(Quarry1)
View(Quarry2)
View(Quarry3)
?round
cbp13co <- read.csv("~/Downloads/cbp13co.txt", header=FALSE, comment.char="#")
View(cbp13co)
rm(cbp13co)
cbp13co <- read.csv("~/Downloads/cbp13co.txt", comment.char="#")
View(cbp13co)
update.packages()
print(paste0(
"The current version of R is 3.2.0, but you are using version ",
r$major, ".", r$minor,
". Please google 'download R' and download the current version of R."
))
}
# now test
library(choroplethr)
data(df_pop_state)
print(state_choropleth(df_pop_state))
# state_choropleth_acs("B01003", endyear=2012, span=5)
library(choroplethr)
data(df_pop_state)
print(state_choropleth(df_pop_state))
install.packages("devtools")
Bag_of_Words_model <- read.csv("~/Bag_of_Words_model.csv")
View(Bag_of_Words_model)
Energy.Indicators <- read.table("~/Google Drive/Python/University of Michigan/wk3/Energy Indicators.xls", header=TRUE, quote="\"")
View(Energy.Indicators)
install.packages(c('repr', 'IRdisplay', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("swirl")
packageVersion('swirl')
library(swirl)
library(swirl)
swirl()
install_from_swirl('Statistical Inference')
swirl()
33/36
'deck'
deck
52
4/52
0
12/52
12/52*11/51
12/52*2/51
2/51
.64
.64
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
swirl()
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
getwd()
data <- read.table("credit_card_data-headers.txt", header=TRUE,
sep=" ")
data = read.table("credit_card_data-headers.txt", header=TRUE,
sep=" ")
data = read.table('credit_card_data-headers.txt', header = TRUE, sep = ' ')
getwd()
setwd('/Users/jfftilton/gitClones/omsa/intro_analytics_modeling/homework/hw1')
data = read.table('credit_card_data-headers.txt', header = TRUE, sep = ' ')
data
data = read.table('credit_card_data-headers.txt', header = TRUE, sep = '\t')
data
install.packages("kernlab")
install.packages("kernlab")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data[,1:10]
head(data)
model = ksvm(data[,1:10],data[,11],type="Csvc",kernel="vanilladot",C=100,scaled=TRUE)
model = ksvm(data[,1:10],data[,11],type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
data[,1:10]
model = ksvm(data[,1:10],data[,11])
x = data[,1:10]
x
length(x)
y = data[,11]
length(y)
data[1:10,1:10]
data[0:10,1:10]
data[0:,1:10]
data[,1:10]
x = data[,1:10]
y = data[,11]
model = ksvm(x=x,y=y,type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
x = as.matrix(data[,1:10])
y = data[,11]
model = ksvm(x=x,y=y,type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
## the below is from https://stackoverflow.com/a/17200430/4296857
## 75% of the sample size
smp_size <- floor(0.75 * nrow(data))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
train <- data[train_ind, ]
test <- data[-train_ind, ]
train
knitr::opts_chunk$set(echo = TRUE)
library("kernlab")
data = read.table('credit_card_data-headers.txt', header = TRUE, sep = '\t')
head(data)
## the below is from https://stackoverflow.com/a/17200430/4296857
## 75% of the sample size
smp_size = floor(0.75 * nrow(data))
## set the seed to make your partition reproducible
set.seed(123)
train_ind = sample(seq_len(nrow(data)), size = smp_size)
train = data[train_ind, ]
test = data[-train_ind, ]
x_train = as.matrix(train[,1:10])
y_train = train[,11]
x_test = as.matrix(test[,1:10])
y_test = test[,11]
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
predict(model, test)
predict(model, x_test)
y_test
y_hat = predict(model, x_test)
table(y_hat,y_test)
y_hat - y_test
y_hat
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=10,scaled=TRUE)
y_hat = predict(model, x_test)
table(y_hat,y_test)
y_hat
y_hat - y_test
sum(y_hat)
rmse(y_hat,y_test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=50,scaled=TRUE)
y_hat = predict(model, x_test)
y_hat-y_test
table(y_hat,y_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a
model@xmatrix[[1]]
model@coef[[1]]
model@xmatrix[[1]] * model@coef[[1]]
colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 <- –model@b
a0 = -model@b
a0
sum(y_hat == data[,11]) / nrow(data)
sum(y_hat == test[,11]) / nrow(test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=100,scaled=TRUE)
y_hat = predict(model, x_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 = -model@b
sum(y_hat == test[,11]) / nrow(test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=1,scaled=TRUE)
y_hat = predict(model, x_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 = -model@b
sum(y_hat == test[,11]) / nrow(test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=1000,scaled=TRUE)
y_hat = predict(model, x_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 = -model@b
sum(y_hat == test[,11]) / nrow(test)
y_hat
y_hat == test[,11]
sum(y_hat == test[,11])
nrow(test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=.1000,scaled=TRUE)
y_hat = predict(model, x_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 = -model@b
sum(y_hat == test[,11]) / nrow(test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=0,scaled=TRUE)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=1,scaled=TRUE)
y_hat = predict(model, x_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 = -model@b
sum(y_hat == test[,11]) / nrow(test)
model = ksvm(x=x_train,y=y_train,type="C-svc",kernel="vanilladot",C=1,scaled=TRUE)
y_hat = predict(model, x_test)
a = colSums(model@xmatrix[[1]] * model@coef[[1]])
a
a0 = -model@b
sum(y_hat == test[,11]) / nrow(test)
