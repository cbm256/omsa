plot(model3b, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3b), type ='h', col='red')
model3c <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data)
summary(model3c)
plot(model3c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
model3c <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data)
summary(model3c)
plot(model3c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
finalmodel <- lm(log(NonDreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
model4 <- lm(Dreaming ~. -Species -Dreaming -TotalSleep, data = data)
summary(model4)
plot(model4, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4), type ='h', col='red')
model4 <- lm(Dreaming ~. -Species -NonDreaming -TotalSleep, data = data)
summary(model4)
plot(model4, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4), type ='h', col='red')
model4 <- lm(Dreaming ~. -Species -NonDreaming -TotalSleep, data = data2)
data2 = data[-11, ]
data2 = data[-11, ]
model4 <- lm(Dreaming ~. -Species -NonDreaming -TotalSleep, data = data2)
summary(model4)
plot(model4, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4), type ='h', col='red')
model4a <- lm(log(Dreaming) ~. -Species -Dreaming -TotalSleep, data = data)
model4a <- lm(log(Dreaming) ~. -Species -NonDreaming -TotalSleep, data = data2)
summary(model4a)
plot(model4a, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4a), type ='h', col='red')
model3b <- lm(Dreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Exposure +Predation +Danger, data = data2)
summary(model4b)
model4b <- lm(Dreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Exposure +Predation +Danger, data = data2)
summary(model4b)
plot(model4b, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4b), type ='h', col='red')
model4c <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data2)
summary(model4c)
plot(model4c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
model4c <- lm(Dreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data2)
summary(model4c)
plot(model4c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
finalmodel <- lm(log(Dreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data2)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
finalmodel <- lm(log(NonDreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
finalmodel <- lm(log(Dreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data2)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
data = read.csv("GA_EDVisit.csv",header=TRUE) data = na.omit(data)
data = read.csv("GA_EDVisit.csv",header=TRUE) data = na.omit(data)
data = read.csv("GA_EDVisit.csv",header=TRUE)
getwd()
setwd("~/gitClones/omsa/regression/hw/hw_05")
data = read.csv("GA_EDVisit.csv",header=TRUE)
getwd()
data = read.csv("GA_EDVisit.csv",header=TRUE)
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data) attach(data)
# Get names of the column
names = colnames(data) attach(data)
# Get names of the column
names = colnames(data)
attach(data)
## standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
Y = cbind(ED.visits, Asthma_children-ED.visits)
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
X = cbind(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
model2 = model_q2 = glm(Y ~ X, family=binomial)
summary(model2)
X
No.Hospitals
model2 =  glm(Y ~ X, family=binomial)
summary(model2)
model1 = glm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS, family=binomial)
summary(model1)
X = cbind(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
model2 =  glm(Y ~ X, family=binomial)
summary(model2)
X = cbind(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
model2 =  glm(Y ~ X, family=binomial)
summary(model2)
m1 = lm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS)
m2 = lm(Y~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS)
s = step(m2, scope = list(lower = m1, upper = m2), direction = "forward")
summary(s)
m1 = lm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS)
m2 = lm(Y~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS)
step(scope = list(lower = m1, upper = m2), direction = "forward")
step(m1, scope = list(lower = m1, upper = m2), direction = "forward")
m1 = lm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS)
m2 = lm(Y~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS)
step(m1, scope = list(lower = m1, upper = m2), direction = "forward")
m1 = lm(ED.visits ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS)
m2 = lm(ED.visits~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS)
step(m1, scope = list(lower = m1, upper = m2), direction = "forward")
Y
m1 = lm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS)
m2 = lm(Y~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS)
summary(m1)
tep(m1, scope = list(lower = m1, upper = m2), direction = "forward")
step(m1, scope = list(lower = m1, upper = m2), direction = "forward")
m1 = glm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS, family=binomial)
m2 = glm(Y~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS, family=binomial)
step(m1, scope = list(lower = m1, upper = m2), direction = "forward")
summary(glm(formula = Y ~ sAvgDistS + sAvgDistP + sMedianIncome + sNumHospitals +
sPercentLessHS + sPercentHS + A10.14 + A5.9 + DistPLessHS +
DistHS + DistPHS + DistIncome + DistPA5.9 + DistPA10.14 +
DistA10.14 + DistLessHS, family = binomial))
m1 = glm(Y ~ sAvgDistS+sAvgDistP+sMedianIncome+sNumHospitals+sPercentLessHS+sPercentHS, family=binomial)
m2 = glm(Y~ A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS, family=binomial)
step(m2, scope = list(lower = m1, upper = m2), direction = "backward")
set.seed(123)
library(glmnet)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
install.packages("glmnet")
X = cbind(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
Y = cbind(ED.visits, Asthma_children-ED.visits)
set.seed(123)
library(glmnet)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,type="class",nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
summary(model)
model
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
coef(model,s = model.cv$lambda.min)
model.cv=cv.glmnet(A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(A5.9+A10.14+ sAvgDistS+ sAvgDistP+ sMedianIncome+sPercentLessHS+sPercentHS+sNumHospitals+DistA5.9+DistA10.14+DistIncome+DistLessHS+DistHS+ DistPA5.9+ DistPA10.14+DistPIncome+DistPLessHS+DistPHS, Y,family=c("binomial"), alpha = 1, nlambda = 100)
coef(model,s = model.cv$lambda.min)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
coef(model,s = model.cv$lambda.min)
A5.9
sAvgDistS
typeof(A5.9)
typeof(sAvgDistS)
names
sAvgDistS
sAvgDistS[1]
sAvgDistS[1:]
sAvgDistS[1:-1]
sAvgDistS[1:456]
X = cbind(A5.9, A10.14, sAvgDistS[1:456], sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
coef(model,s = model.cv$lambda.min)
X
colnames(X)
X = cbind(A5.9, A10.14, "sAvgDistS" = sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
coef(model,s = model.cv$lambda.min)
colnames(X)
X = cbind(A5.9, A10.14, "sAvgDistS" = sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
colnames(X)
colnames(Y) <- cbind("ED.visits", "Asthma_children-ED.visits")
colnames(X) <- cbind("A5.9", "A10.14", "sAvgDistS", "sAvgDistP", "sMedianIncome", "sPercentLessHS", "sPercentHS", "sNumHospitals", "DistA5.9", "DistA10.14", "DistIncome", "DistLessHS", "DistHS", "DistPA5.9", "DistPA10.14", "DistPIncome", "DistPLessHS", "DistPHS")
X = cbind(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome, sPercentLessHS, sPercentHS, sNumHospitals, DistA5.9, DistA10.14, DistIncome, DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome, DistPLessHS, DistPHS)
colnames(Y) <- cbind("ED.visits", "Asthma_children-ED.visits")
colnames(X) <- cbind("A5.9", "A10.14", "sAvgDistS", "sAvgDistP", "sMedianIncome", "sPercentLessHS", "sPercentHS", "sNumHospitals", "DistA5.9", "DistA10.14", "DistIncome", "DistLessHS", "DistHS", "DistPA5.9", "DistPA10.14", "DistPIncome", "DistPLessHS", "DistPHS")
set.seed(123)
library(glmnet)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=1,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = 1, nlambda = 100)
coef(model,s = model.cv$lambda.min)
summary(model2)
model2 =  glm(Y ~ X, family=binomial)
summary(model2)
model.cv=cv.glmnet(X,Y,family=c("binomial"),alpha=.5,nfolds=5)
model= glmnet(X, Y,family=c("binomial"), alpha = .5, nlambda = 100)
coef(model,s = model.cv$lambda.min)
knitr::opts_chunk$set(echo = TRUE, fig.pos= "H")
data=faraway::fat
install.packages("faraway")
data=faraway::fat
sample.split( data, SplitRatio = 1/4, group = NULL )
library(caTools)
sample.split( data, SplitRatio = 1/4, group = NULL )
table(data,msk)
msk = sample.split( data, SplitRatio = 1/4, group = NULL )
table(data,msk)
data
data[-1]
data[-1,-3]
data=faraway::fat
data[-1,-3]
data[-1]
data = data[-1]
data
data = data [-2]
data
msk = sample.split( data, SplitRatio = 1/4, group = NULL )
table(data,msk)
library(dplyr)
data.train = sample_frac(Default, 0.7)
head(data)
smp_size <- floor(0.8 * nrow(data))
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
train <- data[train_ind, ]
test <- data[-train_ind, ]
train
par(mfrow = c(1,1))
plot(train)
train %>%
gather(-siri, key = "var", value = "value") %>%
ggplot(aes(x = value, y = siri)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyr")
library(ggplot2)
library(tidyr)
train %>%
gather(-siri, key = "var", value = "value") %>%
ggplot(aes(x = value, y = siri)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
M <- cor(train)
corrplot(M, method = "circle")
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(M, method = "circle")
corrplot(M, method = "ellipse")
m = lm(siri ~ ., data = train)
summary(m)
vif(m)
install.packages("car")
install.packages("car")
install.packages("curl")
library(car)
install.packages("regclass")
library(regclass)
m = lm(siri ~ ., data = train)
vif(m)
VIF(m)
eigen(train)
eigen(matrix(train))
eigen(as.matrix(train))
eigen(data.matrix(train))
data.matrix(train)
as.matrix(train)
eigen(as.matrix(train))
eigen(as.matrix(data))
eigen(t(train)%*%train)$values
t(train)%*%train)
t(train)%*%train
t(train)
t(train)%*%train
t(train)%*%train
t(train)%*%as.matrix(train)
eigen(t(train)%*%as.matrix(train))
eigen(t(train)%*%as.matrix(train))$values
eigen(t(train)%*%as.matrix(train))$values *5
eigen(t(train)%*%as.matrix(train))$values^-1
eigen(t(train)%*%as.matrix(train))$values^-1 * 9.997697e+07
(eigen(t(train)%*%as.matrix(train))$values^-1 * 9.997697e+07 )^.5
model1 = lm(siri~ ., data=train)
summary(model1)
summary(model1)
model2 = lm(siri ~ weight + adipos+ free+chest+abdom+ thigh+  forearm, data = train)
summary(model2)
anova(model1, model2)
anova(model2, model1)
anova(model1, model2)
summary(model2)
predict(model1, train)
rmse(train,predict(model1, train))
rmse(train$siri,predict(model1, train))
predict(model1, train)
train$siri
predict(model1, train)
rmse(train$siri,predict(model1, train[-1]))
predict(model1, train[-1])
install.packages("Metrics")
library(Metrics)
rmse(train$siri,predict(model1, train[-1]))
rmse(train$siri,predict(model1, test[-1]))
rmse(test$siri,predict(model1, test[-1]))
rmse(train$siri,predict(model1, train[-1]))
rmse(test$siri,predict(model1, test[-1]))
par(mfrow=c(2,2))
qqnorm(residuals(model1))
qqline(residuals(model1))
hist(residuals(model1))
plot(residuals(model1), xlab = "Order", ylab = "Residuals")
abline(0,0, lty=1,col="red")
plot(fitted(model1),residuals(model1), xlab="Fitted Valus", ylab = "residuals")
abline(0,0, lty=1,col="red")
boxcox(model1, lambda = seq(-2, 2, 1/10), plotit = TRUE,
interp, eps = 1/50, xlab = expression(lambda),
ylab = "log-Likelihood", ...)
library("MASS", lib.loc="/usr/lib/R/library")
boxcox(model1, lambda = seq(-2, 2, 1/10), plotit = TRUE,
interp, eps = 1/50, xlab = expression(lambda),
ylab = "log-Likelihood", ...)
boxcox(model1, lambda = seq(-2, 2, 1/10), plotit = TRUE,
interp, eps = 1/50, xlab = expression(lambda),
ylab = "log-Likelihood")
boxcox(model1,lambda = seq(-0.25, 0.25, length = 10))
boxcox(model1,lambda = seq(0,.9, length = 10))
boxcox(model1,lambda = seq(.1,.9, length = 10))
train
boxcox(siri+.01~., data = train,lambda = seq(.1,.9, length = 10))
boxcox(siri+.01~., data = train,lambda = seq(-.25,.9, length = 10))
boxcox(siri+.01~., data = train,lambda = seq(-.25,1, length = 10))
library(MASS)
boxcox(siri+.01~., data = train,lambda = seq(-.25,1, length = 10))
b = boxcox(siri+.01~., data = train,lambda = seq(-.25,1, length = 10))
lambda <- b$x # lambda values
lik <- b$y # log likelihood values for SSE
bc <- cbind(lambda, lik) # combine lambda and lik
sorted_bc <- bc[order(-lik),] # values are sorted to identify the lambda value for the maximum log likelihood for obtaining minimum SSE
head(sorted_bc, n = 10)
library(leaps)
train[1]
leaps(x,y, method = "Cp")
x = as.matrix(train[-1])
y = as.matrix(train[1])
leaps(x,y, method = "Cp")
out = leaps(x,y, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
cbind(as.matrix(out$which),out$Cp)
best.model = which(out$Cp==min(out$Cp))
cbind(as.matrix(out$which), out$Cp)[best.model,]
best.model = which(out$Cp==min(out$Cp))
best.model
cbind(as.matrix(out$which), out$Cp)[best.model,]
train.columns
train.columnames
colnames(train)
colnames(train)[cbind(as.matrix(out$which), out$Cp)[best.model,]]
cbind(as.matrix(out$which), out$Cp)[best.model,]
colnames(train)[cbind(as.matrix(out$which), out$Cp)[best.model,]>0]
colnames(train[-1])[cbind(as.matrix(out$which), out$Cp)[best.model,]>0]
colnames(train)[cbind(as.matrix(out$which), out$Cp)[best.model,]>0]
cbind(as.matrix(out$which), out$Cp)[best.model,]
colnames(train)
cbind(as.matrix(out$which), out$Cp)[best.model,]
colnames(train[-1])[cbind(as.matrix(out$which), out$Cp)[best.model,]>0]
step(model1,  direction = "forward")
step(model1, scope = list(upper = model1), direction = "forward")
step(model1, direction = "backward")
rmse(train$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), train[-1]))
rmse(test$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), test[-1]))
rmse(train$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), train[-1]))
rmse(test$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), test[-1]))
rmse(test$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), test[-1]))
rmse(train$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), train[-1]))
rmse(train$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), train[-1]))
rmse(test$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), test[-1]))
rmse(train$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), train[-1]))
head(train)
y = train[1]
y
10^seq(3, -2, by = -.1)
lambdas = 10^seq(3, -2, by = -.1)
model.cv=cv.glmnet(x,y,alpha=0,nfolds=10, lambdas=lambdas)
library(glmnet)
x = train[-1]
y = train[1]
lambdas = 10^seq(3, -2, by = -.1)
model.cv=cv.glmnet(x,y,alpha=0,nfolds=10, lambdas=lambdas)
model.cv=cv.glmnet(x,y,alpha=0,nfolds=10)
x = as.matrix(train[-1])
y = as.matrix(train[1])
lambdas = 10^seq(3, -2, by = -.1)
model.cv=cv.glmnet(x,y,alpha=0,nfolds=10)
plot(model.cv)
opt_lambda = model.cv$lambda.min
opt_lambda
model3= glmnet(x,y, alpha = 0, lambda = opt_lambda)
summary(model3)
coef(model3,s = model.cv$lambda.min)
model3= glmnet(x,y, alpha = 0, nlambda = 100 )
summary(model3)
coef(model3,s = model.cv$lambda.min)
coef(model3,s = model.cv$lambda.min)
model.cv=cv.glmnet(x,y,alpha=0,nfolds=10)
opt_lambda = model.cv$lambda.min
model3= glmnet(x,y, alpha = 0, lambda = opt_lambda )
coef(model3,s = model.cv$lambda.min)
summary(model3)
predict(model3, train[-1])
predict(model3, newx = train[-1])
predict(model3, newx = as.matrix(train[-1]))
rmse(predict(model3, newx = as.matrix(train[-1])), train[1])
rmse(train$siri,predict(lm(formula = siri ~ age + weight + height + adipos + free + chest +
abdom + thigh + ankle + biceps + forearm, data = train), train[1]))
rmse(train[1],predict(model3, newx = as.matrix(train[-1])))
rmse(train$siri,predict(model3, as.matrix(train[-1])))
rmse(test$siri,predict(model3, as.matrix(test[-1])))
rmse(train$siri,predict(model3, as.matrix(train[-1])))
rmse(train$siri,predict(model3, as.matrix(train[-1])))
rmse(test$siri,predict(model3, as.matrix(test[-1])))
opt_lambda
train
model.cv=cv.glmnet(x,y,alpha=1,nfolds=10)
opt_lambda = model.cv$lambda.min
model4= glmnet(x,y, alpha = 0, lambda = opt_lambda )
coef(model4,s = model.cv$lambda.min)
summary(model4)
rmse(train$siri,predict(model4, as.matrix(train[-1])))
rmse(test$siri,predict(model4, as.matrix(test[-1])))
opt_lambda
cbind(as.matrix(out$which), out$Cp)[best.model,]
rmse(train$siri,predict(lm(formula = siri ~ weight+  adipos+ free+chest+  abdom+  thigh+   ankle+  biceps+ forearm+wrist, data = train), train[-1]))
rmse(test$siri,predict(lm(formula = siri ~ weight+  adipos+ free+chest+  abdom+  thigh+   ankle+  biceps+ forearm+wrist, data = train), test[-1]))
rmse(train$siri,predict(lm(formula = siri ~ weight+  adipos+ free+chest+  abdom+  thigh+   ankle+  biceps+ forearm+wrist, data = train), train[-1]))
rmse(test$siri,predict(lm(formula = siri ~ weight+  adipos+ free+chest+  abdom+  thigh+   ankle+  biceps+ forearm+wrist, data = train), test[-1]))
x
scale(x)
x = scale(as.matrix(train[-1]))
y = as.matrix(train[1])
lambdas = 10^seq(3, -5, by = -.1)
model.cv=cv.glmnet(x,y,alpha=0,nfolds=10)
opt_lambda = model.cv$lambda.min
model3= glmnet(x,y, alpha = 0, lambda = opt_lambda )
coef(model3,s = model.cv$lambda.min)
summary(model3)
rmse(train$siri,predict(model3, scale(as.matrix(train[-1]))))
rmse(test$siri,predict(model3, scale(as.matrix(test[-1]))))
summary(model4)
coef(model4,s = model.cv$lambda.min)
coef(model4,s = model.cv$lambda.min)
library(pls)
set.seed(123)
pcrmod = pcr(siri ~ ., data=train, validation="CV", ncomp=15)
pcrCV = RMSEP(pcrmod, estimate="CV")
plot(pcrCV,main="")
rmse(train$siri,predict(pcrmod,train,ncomp = 6))
rmse(test$siri,predict(pcrmod,test,ncomp = 6))
rmse(train$siri,predict(pcrmod,train,ncomp = 6))
rmse(test$siri,predict(pcrmod,test,ncomp = 6))
coef = coef(model4,s = model.cv$lambda.min)
coef!=0
coef!=0$values
coef
coef[0]
coef !=0
coef
odel.cv=cv.glmnet(x,y,alpha=1,nfolds=10)
opt_lambda = model.cv$lambda.min
model4= glmnet(x,y, alpha = 1, lambda = opt_lambda )
coef = coef(model4,s = model.cv$lambda.min)
rmse(train$siri,predict(model4, as.matrix(train[-1])))
model.cv=cv.glmnet(x,y,alpha=1,nfolds=10)
opt_lambda = model.cv$lambda.min
model4= glmnet(x,y, alpha = 1, lambda = opt_lambda )
coef = coef(model4,s = model.cv$lambda.min)
summary(model4)
rmse(train$siri,predict(model4, as.matrix(train[-1])))
rmse(train$siri,predict(model4, as.matrix(train[-1])))
rmse(test$siri,predict(model4, as.matrix(test[-1])))
x = as.matrix(train[-1])
y = as.matrix(train[1])
model.cv=cv.glmnet(x,y,alpha=1,nfolds=10)
opt_lambda = model.cv$lambda.min
model4= glmnet(x,y, alpha = 1, lambda = opt_lambda )
coef = coef(model4,s = model.cv$lambda.min)
summary(model4)
rmse(train$siri,predict(model4, as.matrix(train[-1])))
rmse(test$siri,predict(model4, as.matrix(test[-1])))
rmse(train$siri,predict(model4, as.matrix(train[-1])))
rmse(test$siri,predict(model4, as.matrix(test[-1])))
opt_lambda
coef != 0
coef
