par(mfrow=c(4,2))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
abline(lm(NonDreaming ~ BrainWt, data = data))
# Transform BrainWt
plot(log(BrainWt), NonDreaming)
abline(lm(NonDreaming ~log(BrainWt), data = data))
#Inspect LifeSpan
plot(LifeSpan, NonDreaming)
abline(lm(NonDreaming ~ LifeSpan, data = data))
# Transform LifeSpan
plot(log(LifeSpan), NonDreaming)
abline(lm(NonDreaming ~log(LifeSpan), data = data))
#Inspect Gestation
plot(Gestation, NonDreaming)
abline(lm(NonDreaming ~ Gestation, data = data))
# Transform Gestation
plot(log(Gestation), NonDreaming)
abline(lm(NonDreaming ~log(Gestation), data = data))
par(mfrow=c(8,2))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
par(mfrow=c(8,2))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
par(mfrow=c(4,2))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
abline(lm(NonDreaming ~ BrainWt, data = data))
# Transform BrainWt
plot(log(BrainWt), NonDreaming)
abline(lm(NonDreaming ~log(BrainWt), data = data))
#Inspect LifeSpan
plot(LifeSpan, NonDreaming)
abline(lm(NonDreaming ~ LifeSpan, data = data))
# Transform LifeSpan
plot(log(LifeSpan), NonDreaming)
abline(lm(NonDreaming ~log(LifeSpan), data = data))
#Inspect Gestation
plot(Gestation, NonDreaming)
abline(lm(NonDreaming ~ Gestation, data = data))
# Transform Gestation
plot(log(Gestation), NonDreaming)
abline(lm(NonDreaming ~log(Gestation), data = data))
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(2, 2))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(1, 1),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
abline(lm(NonDreaming ~ BrainWt, data = data))
# Transform BrainWt
plot(log(BrainWt), NonDreaming)
abline(lm(NonDreaming ~log(BrainWt), data = data))
#Inspect LifeSpan
plot(LifeSpan, NonDreaming)
abline(lm(NonDreaming ~ LifeSpan, data = data))
# Transform LifeSpan
plot(log(LifeSpan), NonDreaming)
abline(lm(NonDreaming ~log(LifeSpan), data = data))
#Inspect Gestation
plot(Gestation, NonDreaming)
abline(lm(NonDreaming ~ Gestation, data = data))
# Transform Gestation
plot(log(Gestation), NonDreaming)
abline(lm(NonDreaming ~log(Gestation), data = data))
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
layout(mat = matrix(c(1, 2, 3, 4,5,6,7,8),
nrow = 4,
ncol = 2),
heights = c(2, 2),    # Heights of the two rows
widths = c(1, 1))
#Inspect BodyWt
plot(BodyWt, NonDreaming)
plot(BodyWt, NonDreaming)
abline(lm(NonDreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), NonDreaming)
abline(lm(NonDreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, NonDreaming)
abline(lm(NonDreaming ~ BrainWt, data = data))
# Transform BrainWt
plot(log(BrainWt), NonDreaming)
abline(lm(NonDreaming ~log(BrainWt), data = data))
#Inspect LifeSpan
plot(LifeSpan, NonDreaming)
abline(lm(NonDreaming ~ LifeSpan, data = data))
# Transform LifeSpan
plot(log(LifeSpan), NonDreaming)
abline(lm(NonDreaming ~log(LifeSpan), data = data))
#Inspect Gestation
plot(Gestation, NonDreaming)
abline(lm(NonDreaming ~ Gestation, data = data))
# Transform Gestation
plot(log(Gestation), NonDreaming)
abline(lm(NonDreaming ~log(Gestation), data = data))
boxplot(NonDreaming ~ Predation, xlab = "Predation", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Exposure, xlab = "Exposure", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Danger, xlab = "Total Danger", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Predation, xlab = "Predation", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Predation, xlab = "Predation", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Exposure, xlab = "Exposure", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Danger, xlab = "Total Danger", ylab = "NonDreamy Sleep")
par(mfrow=c(3,1))
boxplot(NonDreaming ~ Predation, xlab = "Predation", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Exposure, xlab = "Exposure", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Danger, xlab = "Total Danger", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Predation, xlab = "Predation", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Exposure, xlab = "Exposure", ylab = "NonDreamy Sleep")
boxplot(NonDreaming ~ Danger, xlab = "Total Danger", ylab = "NonDreamy Sleep")
Predation
data
airs(Dreaming~BodyWt+BrainWt+LifeSpan+Gestation) #or plot(data)
pairs(Dreaming~BodyWt+BrainWt+LifeSpan+Gestation) #or plot(data)
Dreamingcor <- cor(data[c(2,3,7,8)],data[5])
Dreamingcor
plot(BodyWt, Dreaming)
abline(lm(Dreaming ~ BodyWt, data = data))
# Transform BodyWt
plot(log(BodyWt), Dreaming)
abline(lm(Dreaming ~log(BodyWt), data = data))
#Inspect BrainWt
plot(BrainWt, Dreaming)
abline(lm(Dreaming ~ BrainWt, data = data))
# Transform BrainWt
plot(log(BrainWt), Dreaming)
abline(lm(Dreaming ~log(BrainWt), data = data))
#Inspect LifeSpan
plot(LifeSpan, Dreaming)
abline(lm(Dreaming ~ LifeSpan, data = data))
# Transform LifeSpan
plot(log(LifeSpan), Dreaming)
abline(lm(Dreaming ~log(LifeSpan), data = data))
#Inspect Gestation
plot(Gestation, Dreaming)
abline(lm(Dreaming ~ Gestation, data = data))
# Transform Gestation
plot(log(Gestation), Dreaming)
abline(lm(Dreaming ~log(Gestation), data = data))
boxplot(Dreaming ~ Predation, xlab = "Predation", ylab = "Dreamy Sleep")
boxplot(Dreaming ~ Exposure, xlab = "Exposure", ylab = "Dreamy Sleep")
boxplot(Dreaming ~ Danger, xlab = "Total Danger", ylab = "Dreamy Sleep")
model3 <- lm(NonDreaming ~. -Species -Dreaming -TotalSleep, data = data)
summary(model3)
plot(model3, cook.levels = c(4/42,0.5,1))
pairs(NonDreaming ~. -Species -Dreaming -TotalSleep, data = data) #or plot(data)
```{r q3.5_linearity}
pairs(NonDreaming ~. -Species -Dreaming -TotalSleep, data = data) #or plot(data)
plot(cooks.distance(model3))
plot(cooks.distance(model3), type ='h')
plot(cooks.distance(model3), type ='h', col='red')
model3 <- lm(NonDreaming ~. -Species -Dreaming -TotalSleep, data = data)
summary(model3)
plot(model3, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3), type ='h', col='red')
model3a <- lm(log(NonDreaming) ~. -Species -Dreaming -TotalSleep, data = data)
summary(model3a)
plot(model3a, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3a), type ='h', col='red')
pairs(NonDreaming ~. -Species -Dreaming -TotalSleep, data = data) #or plot(data)
model3b <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Exposure +Predation +Danger, data = data)
summary(model3b)
plot(model3b, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3a), type ='h', col='red')
pairs(log(NonDreaming) ~. -Species -Dreaming -TotalSleep, data = data) #or plot(data)
plot(cooks.distance(model3b), type ='h', col='red')
model3b <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Exposure +Predation +Danger, data = data)
summary(model3b)
plot(model3b, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3b), type ='h', col='red')
model3c <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data)
summary(model3c)
plot(model3c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
model3c <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data)
summary(model3c)
plot(model3c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
finalmodel <- lm(log(NonDreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
model4 <- lm(Dreaming ~. -Species -Dreaming -TotalSleep, data = data)
summary(model4)
plot(model4, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4), type ='h', col='red')
model4 <- lm(Dreaming ~. -Species -NonDreaming -TotalSleep, data = data)
summary(model4)
plot(model4, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4), type ='h', col='red')
model4 <- lm(Dreaming ~. -Species -NonDreaming -TotalSleep, data = data2)
data2 = data[-11, ]
data2 = data[-11, ]
model4 <- lm(Dreaming ~. -Species -NonDreaming -TotalSleep, data = data2)
summary(model4)
plot(model4, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4), type ='h', col='red')
model4a <- lm(log(Dreaming) ~. -Species -Dreaming -TotalSleep, data = data)
model4a <- lm(log(Dreaming) ~. -Species -NonDreaming -TotalSleep, data = data2)
summary(model4a)
plot(model4a, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4a), type ='h', col='red')
model3b <- lm(Dreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Exposure +Predation +Danger, data = data2)
summary(model4b)
model4b <- lm(Dreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Exposure +Predation +Danger, data = data2)
summary(model4b)
plot(model4b, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model4b), type ='h', col='red')
model4c <- lm(NonDreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data2)
summary(model4c)
plot(model4c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
model4c <- lm(Dreaming ~ log(BodyWt) +log(BrainWt) +log(LifeSpan) +log(Gestation) +Danger, data = data2)
summary(model4c)
plot(model4c, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(model3c), type ='h', col='red')
finalmodel <- lm(log(Dreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data2)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
finalmodel <- lm(log(NonDreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
finalmodel <- lm(log(Dreaming) ~ log(BodyWt) + log(BrainWt) + log(LifeSpan) + log(Gestation) + Danger, data = data2)
summary(finalmodel)
plot(finalmodel, cook.levels = c(4/42,0.5,1))
plot(cooks.distance(finalmodel), type ='h', col='red')
knitr::opts_chunk$set(echo = TRUE)
getcwd()
getwd()
data = read.csv("atlanta_flights.csv", header=TRUE, sep=",")
# Viewing first few rows of data
head(data)
model = lm(DEPATURE_DELAY ~DAY_OF_WEEK+DISTANCE+AIRLINE+DESTINATION_AIRPORT+SCHEDULED_DEPARTURE+SCHEDULED_ARRIVAL, data = data)
# Viewing first few rows of data
head(data)
model = lm(DEPARTURE_DELAY ~DAY_OF_WEEK+DISTANCE+AIRLINE+DESTINATION_AIRPORT+SCHEDULED_DEPARTURE+SCHEDULED_ARRIVAL, data = data)
summary(model)
data$DESTINATION_AIRPORT=as.factor(data$DESTINATION_AIRPORT)
model = lm(DEPARTURE_DELAY ~DAY_OF_WEEK+DISTANCE+AIRLINE+DESTINATION_AIRPORT+SCHEDULED_DEPARTURE+SCHEDULED_ARRIVAL, data = data)
summary(model)
step(lm, direction = c("both"))
step(lm, lm,direction = "both")
step(lm)
step(model, direction = "both")
model2 = lm(formula = DEPARTURE_DELAY ~ DAY_OF_WEEK + AIRLINE + DESTINATION_AIRPORT +
SCHEDULED_DEPARTURE, data = data)
summary(model2)
cooks.distance(model2)
cooks.distance(model2)>1
data[cooks.distance(model2)<1]
data[[cooks.distance(model2)<1]]
library(tidyverse)
install.packages("tidyverse")
library(dplyr)
newData = pull(data, DAY_OF_WEEK)
newData
newData = pull(data, DAY_OF_WEEK, AIRLINE , DESTINATION_AIRPORT ,
SCHEDULED_DEPARTURE)
newData = pull(data, DAY_OF_WEEK, AIRLINE , DESTINATION_AIRPORT , SCHEDULED_DEPARTURE)
newData = pull(data, c(DAY_OF_WEEK, AIRLINE , DESTINATION_AIRPORT , SCHEDULED_DEPARTURE))
newData = select(data.DAY_OF_WEEK, data.AIRLINE , data.DESTINATION_AIRPORT , data.SCHEDULED_DEPARTURE)
newData = select(DAY_OF_WEEK, AIRLINE , DESTINATION_AIRPORT , SCHEDULED_DEPARTURE)
newData = select(data, DAY_OF_WEEK, AIRLINE , DESTINATION_AIRPORT , SCHEDULED_DEPARTURE)
newData
cooksd <- cooks.distance(model2)>1
newData[cooksd]
cooksd
cooksd <- cooks.distance(model2)
influential <- as.numeric(names(cooksd)[(cooksd > (4/nrows(newData)))])
influential <- as.numeric(names(cooksd)[(cooksd > (4/nrow(newData)))])
influential
newData[-influential]
newData[-influential, ]
influential
library(tidyr)
newData[drop_na(-influential), ]
drop_na(-influential)
is.na(influential)
influential[is.na(influential)]
influential[!is.na(influential)]
newData[-influential[!is.na(influential)], ]
nrow(influential)
length(influential)
which(cooksd>1)
install.packages(“Ecdat”)
library(Ecdat)
data(cars)
head(data)
data = data(cars)
head(data)
data =
model = lm(taste~.,data=cheddar)
data(cars)
head(data(cars))
cars
data(cars)
head(cars)
round(cor(cars$speed,cars$dist),3)
model = lm(dist~.,data=cars)
summary(model)
library("dplyr", lib.loc="/usr/local/lib/R/site-library")
mutate(cars, dist_meters = dist*0.3048, speed_mps=speed*0.44704)
head(cars)
cars = mutate(cars, dist_meters = dist*0.3048, speed_mps=speed*0.44704)
model = lm(dist_meters~speed_mps, data=cars)
summary(model)
install.packages("tidyverse")
install.packages(“car”)
library(car)
install.packages("car")
library(car)
nba = read.csv("nba2017.csv", header = TRUE)
setwd("/home/jfftilton/gitClones/omsa/data_analytics_business/hw")
eitc = read.csv("eitc.csv", header = TRUE)
head(eitc)
eitc$postbill= as.numeric(eitc$year >1993) and eitc$kids = as.numeric(eitc$children >=1)
eitc$postbill= as.numeric(eitc$year >1993)
eitc$kids = as.numeric(eitc$children >=1)
head(eitc)
sapply(subset(eitc, postbill==0 & kids == 0), mean)
sapply(subset(eitc, postbill==0 & kids == 0), mean)$earn
sapply(subset(eitc, postbill==0 & kids == 0), mean).earn
a = sapply(subset(eitc, postbill==0 & kids == 0), mean)
a
a$earn
a[0]
a[1]
a[1]+2
a = sapply(subset(eitc, postbill==0 & kids == 0), mean)[8]
a
a = sapply(subset(eitc, postbill==0 & kids == 0), mean)[11]
a
sapply(subset(eitc, postbill==0 & kids == 0, select = work), mean)
a = sapply(subset(eitc, postbill==0 & kids == 0, select = work), mean)
b = sapply(subset(eitc, postbill==0 & kids == 1, select = work), mean)
c =sapply(subset(eitc, postbill==1 & kids == 0, select = work), mean)
d = sapply(subset(eitc, postbill==1 & kids == 1, select = work), mean)
(d-c)-(b-a)
knitr::opts_chunk$set(echo = TRUE, fig.pos= "H")
data = read.csv("Return_Dataset.csv", header = TRUE)
head(data)
head(data, n =10)
cumsum(data)
data$RF
cumsum(data$RF)
cumsum(data[-c("Date")])
cumsum(data[~c("Date")])
as.POSIXct(data$Date)
data$Date = as.POSIXct(data$Date)
data
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("xts")
install.packages("lubridate")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
library("lubridate", lib.loc="/usr/local/lib/R/site-library")
knitr::opts_chunk$set(echo = TRUE, fig.pos= "H")
data = read.csv("Return_Dataset.csv", header = TRUE)
head(data, n =10)
data$date = mdy(data$Date)
as.Posixct(data$Date)
mdy(as.POSIXct(data$Date))
data$date = as.POSIXct(data$Date)
xts(data)
data = read.csv("Return_Dataset.csv", header = TRUE)
head(data, n =10)
data$Date = as.POSIXct(data$Date)
xts(data)
xts(data, order.by=Date)
xts(data, order.by=data$Date)
data = read.csv("Return_Dataset.csv", header = TRUE, stringsAsFactors=FALSE)
head(data, n =10)
data$Date = as.POSIXct(data$Date)
data = xts(data, order.by=data$Date)
head(data)
data[,2:5]
data = read.csv("Return_Dataset.csv", header = TRUE, stringsAsFactors=FALSE)
head(data, n =10)
data$Date = as.POSIXct(data$Date)
data = xts(data[,2:5], order.by=data$Date)
data
data = read.csv("Return_Dataset.csv", header = TRUE, stringsAsFactors=FALSE)
data$Date = as.POSIXct(data$Date)
data = xts(data[,2:5], order.by=data$Date)
head(data, n =10)
Return.cumulative(data, geometric=TRUE)
ret = Return.cumulative(data, geometric=TRUE) * 100
ret
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE)
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE)
legend(legend=paste(paste(c("Performance indexiert"),"1")),cex=0.7, col=bluefocus,lty=1, lwd=2, bty="n",
text.col="black", ncol=1, "bottom", inset = c(0.0, -.20))
text_note=c(paste("Quelle: Bloomberg,", "letzter Datenpunkt:", "last(data$date)"))
mtext(text_note ,cex=0.4,col="grey",side = 1, line = 4, outer = FALSE,padj=0,adj=1)
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE)
legend(legend=paste(paste(c("Performance indexiert"),"1")),cex=0.7, col=bluefocus,lty=1, lwd=2, bty="n",
text.col="black", ncol=1, "bottom", inset = c(0.0, -.20))
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE)
legend(legend=paste(paste(c("Performance indexiert"),"1")),cex=0.7, col=bluefocus,lty=1, lwd=2, bty="n",
text.col="black", ncol=1, "bottom", inset = c(0.0, -.20))
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE)
legend(20,10, c("Edinburgh","Glasgow", "Aberdeen", "St Andrews", "Highlands"),
lty=c(1,1), lwd=c(2.5,2.5), col=c("black", "red", "green", "deepskyblue", "blue"))
head(data, n =10)
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE)
legend(20,10, c("RF","UPS", "KO", "Mkt"),
lty=c(1,1), lwd=c(2.5,2.5), col=c("black", "red", "green", "deepskyblue"))
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE, legend.loc="bottom")
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE, legend.loc="topleft")
head(data, n =10)
SharpeRatio(data[,2:3])
print(SharpeRatio(data[,2:3]))
TreynorRatio(data[,2:3])
TreynorRatio(data[,2:3], Rb=data$Mkt)
print(SharpeRatio(data[,2:3]))
print(TreynorRatio(data[,2:3], Rb=data$Mkt))
print(TreynorRatio(data[,2:3], Rb=data$Mkt, Rf=data$RF))
print(SharpeRatio(data[,2:3], Rf=data$RF))
chart.CumReturns(data,wealth.index = TRUE, geometric = TRUE, legend.loc="topleft")
