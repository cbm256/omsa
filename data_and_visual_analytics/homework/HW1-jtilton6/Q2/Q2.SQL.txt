-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies(
    id integer,
    name text,
    score integer
    );
    
CREATE TABLE movie_cast(
    movie_id integer,
    cast_id integer,
    cast_name text
    );
    




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.mode csv
.import movie-name-score.txt movies
.import movie-cast.txt movie_cast





-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]


CREATE INDEX scores_index ON movies (score);
CREATE INDEX cast_index ON movie_cast (cast_id);
CREATE INDEX movie_index ON movies (id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

select movs*1.0/total*1.0*100.0 prop  
from(
select count(*) movs
from movies
where score>50)
inner join (
select count(*) total
from movies
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

select * from movies
order by score desc, name
limit 7;




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id, cast_name, count(cast_id) movie_count
from movie_cast
group by cast_id
order by movie_count desc, cast_name
limit 5;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]


select cast_id, cast_name, avg(score) average_score
from(
select cast_id, cast_name, score
from(
select cast_id, cast_name,movie_id 
from(
select cast_id, cast_name,movie_id, count(cast_id) c
from movie_cast
group by cast_id
)
where c>2) table1
inner join (select * from movies where score >50) table2 on table1.movie_id = table2.id
)
group by cast_id
order by average_score desc, cast_name
limit 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

create view good_collaboration as
select 
    cast_member_id1, 
    cast_member_id2, 
    movie_count, 
    average_movie_score
from
(
	select 
		a.cast_id cast_member_id1, b.cast_id cast_member_id2,
		group_concat(distinct a.id),
		count(*) movie_count,
		avg(a.score) average_movie_score
	from
		(select movie_cast.cast_id, movie_cast.cast_name, movies.id, movies.name,  movies.score
		from movie_cast
		inner join  movies on movies.id = movie_cast.movie_id) a
	inner join 
		(select movie_cast.cast_id, movie_cast.cast_name, movies.id, movies.name,  movies.score
		from movie_cast
		inner join  movies on movies.id = movie_cast.movie_id) b
		on b.cast_id > a.cast_id and a.id=b.id
		group by a.cast_id, b.cast_id
)
where 
    movie_count >2 and 
    average_movie_score>=40
order by 
    movie_count desc, 
    average_movie_score desc;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]


 select  distinct
	colab.cast_id, movie_cast.cast_name, colab.collaboration_score
 from 
	movie_cast
inner join 
	(select cast_member_id1 cast_id, avg(average_movie_score) collaboration_score
	from good_collaboration
	group by cast_id
	union all
	select cast_member_id2 cast_id, avg(average_movie_score) collaboration_score
	from good_collaboration
	group by cast_id
	order by collaboration_score desc
) colab on movie_cast.cast_id = colab.cast_id
order by collaboration_score desc, cast_name
limit 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview using fts4(
    id integer,
    name text,
    year integer,
    overview text,
    popularity decimal
    );

.mode csv
.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

select count(*) count_overview from movie_overview
where overview match 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

select id from movie_overview
where overview match 'love NEAR/5 story';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --